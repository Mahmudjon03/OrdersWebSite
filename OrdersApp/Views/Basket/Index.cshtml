@using Domain.Models
@model List<CartItem>
@{
    decimal total = 0;
}
<h2>Корзина</h2>

<form asp-action="CreateOrderDetails" method="post">
    <table class="table-container">
        <thead>
            <tr>
              
            </tr>
        </thead>
        <tbody class="fooddiv">
            @for (int i = 0; i < Model.Count; i++)
            {
                <tr>
                    <td>
                        <img class="imagesCart" src="~/image/@(Model[i].EnglishNameProd)@(Model[i].ProductId).png" alt="foto" />
                    </td>
                    <td>

                        <h5>@Model[i].ProductName</h5>
                        <p>Цена <span id="price-@i">@Model[i].Price</span> $</p>
                        <input type="hidden" name="[@i].ProductName" value="@Model[i].ProductName" />
                        <input type="hidden" name="[@i].ProductId" value="@Model[i].ProductId" />
                        <input type="hidden" name="[@i].Price" value="@Model[i].Price" />
                    </td>

                    <td>
                        <div class="quantitydiv">
                            <button class="plus-btn" type="button" onclick="changeQuantity(@i, -1)">−</button>
                            <input class="qululu" name="[@i].Quantity" id="quantity-@i" value="@Model[i].Quantity" type="number" min="1" onchange="updateTotal()" />
                            <button class="minus-btn" type="button" onclick="changeQuantity(@i, 1)">+</button>
                        </div>
                    </td>
                
                </tr>
            }
            <tr>
                <td> <br class="bg-black" /> <br/> <br /> <br /> <br /> <br /> </td>
                </tr>
        </tbody>
    </table>
    <div class="bottomdiv">
        <div>
            <h6>Итого товаров: <span id="total-amount">@total</span></h6>
            <h6>Скидка: <span id="discount">10</span>%</h6>
            <h4>Итого: <span id="amount"></span> $</h4>
        </div>

    <button type="submit" class="butn btn btn-primary">Оформить заказ</button>
    </div>
</form>


<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteLabel">Удалить товар</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>
            <div class="modal-body">
                Вы уверены, что хотите удалить этот товар?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Нет</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Да, удалить</button>
            </div>
        </div>
    </div>
</div>



<script>
    let pendingDeleteIndex = null;

    function changeQuantity(index, delta) {
        const input = document.getElementById('quantity-' + index);
        let value = parseInt(input.value) || 1;

        if (value <= 1 && delta === -1) {
            pendingDeleteIndex = index;
            const modal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
            modal.show();
            return;
        }

        value += delta;
        if (value < 1) value = 1;

        input.value = value;
        updateTotal();
        location.reload();
    }
    document.getElementById('confirmDeleteBtn').addEventListener('click', function () {
        if (pendingDeleteIndex !== null) {
            fetch('/Basket/RemoveFromCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({ index: pendingDeleteIndex })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                      
                       
                        updateTotal();
                        location.reload();
                    }
                });

            pendingDeleteIndex = null;
        }
    });

    function getAntiForgeryToken() {
        return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
    }
</script>



<script>
function updateTotal() {
    let total = 0;
    const count = @Model.Count;

    for (let i = 0; i < count; i++) {
        const quantityInput = document.getElementById(`quantity-${i}`);
        const priceSpan = document.getElementById(`price-${i}`);

        if (quantityInput && priceSpan) {
            const quantity = parseInt(quantityInput.value) || 0;
            const price = parseFloat(priceSpan.textContent) || 0;

            total += price * quantity;
        }
    }
    const discount = parseInt(document.getElementById("discount").textContent) || 0;

    console.log(discount);
    const discountTotal = total * (1 - discount / 100);
    document.getElementById("total-amount").textContent = total.toFixed(2);
    document.getElementById("amount").textContent = discountTotal.toFixed(2);
}
</script>




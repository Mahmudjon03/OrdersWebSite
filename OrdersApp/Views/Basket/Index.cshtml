@using Domain.Models
@model List<CartItem>
@{
    decimal total = 0;
}

<h2 class="carts">Корзина</h2>

<form asp-action="CreateOrderDetails" method="post">
    <div class="bottomdiv_zagal">

        <h6>Итого товаров: <span id="total-amount">@total</span></h6>

        <button type="button" class="butn_zagal btn btn-primary" onclick="openModal()">Оформить заказ</button>

        <div id="myModal" class="modalokno">
            <div class="modal-contentokno">
                @if (Model.Count == 0)
                {
                    <h2 style="color:#979494; margin:20px;">
                        Корзина пусто!
                    </h2>
                }
                else
                {
                    <h3>Вы уверены, что хотите оформить заказ?</h3>

                }
                <div class="zakazdiv" style="display:flex;">
                    @if (Model.Count != 0)
                    {
                        <button class="btn btn-success btn-sm m-1" type="submit">Да, оформить</button>
                    }
                    <button class="btn btn-danger  btn-sm m-1" type="button" onclick="closeModal()">Отмена</button>
                </div>
            </div>
        </div>

    </div>

    <table class="table-cart">
        <thead>
            <tr>
            </tr>
        </thead>
        <tbody class="fooddiv">
            @for (int i = 0; i < Model.Count; i++)
            {

                <tr class="item-table-cart" data-product-id="@Model[i].ProductId">

                    <td>
                        <img class="imagesCart" src="~/image/@(Model[i].EnglishNameProd)@(Model[i].ProductId).png"
                             style="cursor:pointer"
                             onerror="this.onerror=null;this.src='@Url.Content("~/image/noimage.png")';" 
                             alt="foto" />
                    </td>
                    <td>

                        <h5>@Model[i].ProductName</h5>
                        <p>Цена <span id="price-@i">@Model[i].Price</span> $</p>
                        <input type="hidden" name="[@i].ProductName" value="@Model[i].ProductName" />
                        <input type="hidden" name="[@i].ProductId" value="@Model[i].ProductId" />
                        <input type="hidden" name="[@i].Price" value="@Model[i].Price" />
                    </td>

                    <td>
                       
                        <div class="quantitydiv">
                            <button class="plus-btn" type="button" onclick="changeQuantity(@i, -1)">−</button>
                            <input class="qululu" name="[@i].Quantity" id="quantity-@i" value="@Model[i].Quantity" type="number" min="1" onchange="updateTotal()" onblur="manualQuantityChange(@i)" />
                            <button class="minus-btn" type="button" onclick="changeQuantity(@i, 1)">+</button>
                        </div>
                        <div class="comment-container">
                            <img class="comment" src="~/image/coment.png" alt=""
                            onclick="toggleCommentInput(@i)" />
                        </div>
                            <div id="comment-input-@i" class="comment-input">
                                <textarea name="[@i].Comment" placeholder="Добавьте комментарий..." rows="3"></textarea>
                            </div>
                    </td>

                </tr>


            }
            
          
        </tbody>
    </table>
    <div class="bottomdiv">
        <div class="div_itog">
            <h6 class="h6_div_itog">Итого товаров: <span id="total-amount">@total</span></h6>
            <h6>Скидка: <span id="discount">0</span></h6>
            <h4>Итого: <span id="amount"></span></h4>
        </div>

        <button type="button" class="butn" onclick="openModal()">Оформить заказ</button>

        <div id="myModal" class="modalokno">
            <div class="modal-contentokno">
                @if (Model.Count == 0)
                {
                    <h2 style="color:#979494; margin:20px;">
                        Корзина пусто!
                    </h2>
                }
                else
                {
                    <h3>Вы уверены, что хотите оформить заказ?</h3>

                }
                <div class="zakazdiv" style="display:flex;">
                    @if (Model.Count != 0)
                    {
                        <button class="btn btn-success btn-sm m-1" type="submit">Да, оформить</button>
                    }
                    <button class="btn btn-danger  btn-sm m-1" type="button" onclick="closeModal()">Отмена</button>
                </div>
            </div>
        </div>

    </dxiv>
    

   
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteLabel">Удалить товар</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>
            <div class="modal-body">
                Вы уверены, что хотите удалить этот товар?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Нет</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Да, удалить</button>
            </div>
        </div>
    </div>
</div>
</form>
<script>
    function checkCartVisibility() {
        const zagal = document.querySelector('.bottomdiv_zagal');
        const bottom = document.querySelector('.bottomdiv');

        const doc = document.documentElement;
        const hasScroll = doc.scrollHeight > doc.clientHeight;

        if (!hasScroll) {
            // Нет скролла — скрыть фиксированную корзину
            zagal.style.opacity = '0';
            zagal.style.pointerEvents = 'none';
            return;
        }

        // Есть скролл — применяем обычную проверку
        const bottomRect = bottom.getBoundingClientRect();
        const windowHeight = window.innerHeight;
        const visibleHeight = windowHeight - bottomRect.top;

        if (visibleHeight >= 30) {
            zagal.style.opacity = '0';
            zagal.style.pointerEvents = 'none';
        } else {
            zagal.style.opacity = '1';
            zagal.style.pointerEvents = 'auto';
        }
    }

    window.addEventListener('scroll', checkCartVisibility);
    window.addEventListener('resize', checkCartVisibility);
    window.addEventListener('load', checkCartVisibility);
</script>



<script>
    let pendingDeleteProductId = null;

    function changeQuantity(index, delta) {
        const input = document.getElementById('quantity-' + index);
        let value = parseInt(input.value) || 1;
        if (delta === -1) {
            if (value <= 1) {
                const row = input.closest('tr');
                pendingDeleteProductId = row.getAttribute('data-product-id');
                console.log(pendingDeleteProductId);
                const modal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
                modal.show();
                return;
            }
            const row = input.closest('tr');
            const prodId = row.getAttribute('data-product-id');

            fetch('/Basket/DecreaseQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({ productId: prodId })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        input.value = data.quantity;
                        updateTotal();
                    }
                })
                .catch(() => {
                    alert('❌ Ошибка при уменьшении количества.');
                });

            return;
        }


        if (delta === 1) {
            const row = input.closest('tr');
            prodId = row.getAttribute('data-product-id');
            console.log(prodId);
            fetch('/Basket/IncreaseQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({ productId: prodId })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        input.value = data.quantity; // обновляем input
                        updateTotal();
                    }
                })
                .catch(() => {
                    alert('❌ Ошибка при увеличении количества.');
                });

            return; // чтобы ниже не обновляло локально вручную
        }
    }
    function manualQuantityChange(index) {
        const input = document.getElementById('quantity-' + index);
        let value = parseInt(input.value);
        if (isNaN(value) || value < 1) {
            value = 1;
            input.value = 1;
        }

        const row = input.closest('tr');
        const prodId = row.getAttribute('data-product-id');

        fetch('/Basket/SetQuantity', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': getAntiForgeryToken()
            },
            body: JSON.stringify({ productId: prodId, quantity: value })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    input.value = data.quantity; // Вдруг сервер скорректировал
                    updateTotal();
                } else {
                    alert('❌ Не удалось обновить количество.');
                }
            })
            .catch(() => {
                alert('❌ Ошибка при обновлении количества.');
            });
    }

    document.getElementById('confirmDeleteBtn').addEventListener('click', function () {
        if (pendingDeleteProductId !== null) {
            fetch('/Basket/RemoveFromCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({ productId: pendingDeleteProductId })
            })

                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateTotal();
                        location.reload();
                    }
                });
            console.log(pendingDeleteProductId);
            pendingDeleteProductId = null;
        }
    });


    function getAntiForgeryToken() {
        return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
    }
</script>



<script>
    function updateTotal() {
        let total = 0;
        const count = @Model.Count;

        for (let i = 0; i < count; i++) {
            const quantityInput = document.getElementById(`quantity-${i}`);
            const priceSpan = document.getElementById(`price-${i}`);

            if (quantityInput && priceSpan) {
                const quantity = parseInt(quantityInput.value) || 0;
                const price = parseFloat(priceSpan.textContent) || 0;

                total += price * quantity;
            }
        }
        const discount = parseInt(document.getElementById("discount").textContent) || 0;


        const discountTotal = total * (1 - discount / 100);
        document.getElementById("total-amount").textContent = total.toFixed(2);
        document.getElementById("amount").textContent = discountTotal.toFixed(2);
    }
</script>



